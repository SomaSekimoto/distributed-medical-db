/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IMedicalDatabaseInterface extends utils.Interface {
  functions: {
    "approveViewData(address,address)": FunctionFragment;
    "disapproveViewData(address,address)": FunctionFragment;
    "pay(address)": FunctionFragment;
    "registerDoctor(address)": FunctionFragment;
    "registerPatient(address,string,uint8)": FunctionFragment;
    "removeDoctor(address)": FunctionFragment;
    "updatePatient(address,string,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveViewData"
      | "disapproveViewData"
      | "pay"
      | "registerDoctor"
      | "registerPatient"
      | "removeDoctor"
      | "updatePatient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveViewData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disapproveViewData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDoctor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPatient",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDoctor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePatient",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveViewData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disapproveViewData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePatient",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMedicalDatabase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMedicalDatabaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disapproveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pay(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveViewData(
    _patient: PromiseOrValue<string>,
    _viewer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disapproveViewData(
    _patient: PromiseOrValue<string>,
    _viewer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pay(
    _to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDoctor(
    _doctor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPatient(
    _patient: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _bloodType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeDoctor(
    _doctor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePatient(
    _patient: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _bloodType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    disapproveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pay(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    registerDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disapproveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pay(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disapproveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pay(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
