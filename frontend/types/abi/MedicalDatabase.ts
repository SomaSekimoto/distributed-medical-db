/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MedicalDatabase {
  export type PatientStruct = {
    name: PromiseOrValue<string>;
    bloodType: PromiseOrValue<BigNumberish>;
    lastUpdated: PromiseOrValue<BigNumberish>;
  };

  export type PatientStructOutput = [string, number, BigNumber] & {
    name: string;
    bloodType: number;
    lastUpdated: BigNumber;
  };
}

export interface MedicalDatabaseInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "approveViewData(address,address)": FunctionFragment;
    "disapproveViewData(address,address)": FunctionFragment;
    "getApproved(address)": FunctionFragment;
    "getPatientData(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isApproved(address,address)": FunctionFragment;
    "isDoctor(address)": FunctionFragment;
    "pay(address)": FunctionFragment;
    "registerDoctor(address)": FunctionFragment;
    "registerPatient(address,string,uint8)": FunctionFragment;
    "removeDoctor(address)": FunctionFragment;
    "removePatient(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePatient(address,string,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "approveViewData"
      | "disapproveViewData"
      | "getApproved"
      | "getPatientData"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isApproved"
      | "isDoctor"
      | "pay"
      | "registerDoctor"
      | "registerPatient"
      | "removeDoctor"
      | "removePatient"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "updatePatient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveViewData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disapproveViewData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDoctor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDoctor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPatient",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDoctor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePatient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePatient",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveViewData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disapproveViewData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDoctor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePatient",
    data: BytesLike
  ): Result;

  events: {
    "ApproveViewData(address,address)": EventFragment;
    "DisapproveViewData(address,address)": EventFragment;
    "DoctorRegistered(address,uint256)": EventFragment;
    "DoctorRemoved(address,uint256)": EventFragment;
    "Paid(address,address,uint256)": EventFragment;
    "PatientRegistered(address,string,uint8,uint256)": EventFragment;
    "PatientRemoved(address)": EventFragment;
    "PatientUpdated(address,string,uint8,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveViewData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisapproveViewData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DoctorRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DoctorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatientRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatientRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface ApproveViewDataEventObject {
  patient: string;
  viewer: string;
}
export type ApproveViewDataEvent = TypedEvent<
  [string, string],
  ApproveViewDataEventObject
>;

export type ApproveViewDataEventFilter = TypedEventFilter<ApproveViewDataEvent>;

export interface DisapproveViewDataEventObject {
  patient: string;
  viewer: string;
}
export type DisapproveViewDataEvent = TypedEvent<
  [string, string],
  DisapproveViewDataEventObject
>;

export type DisapproveViewDataEventFilter =
  TypedEventFilter<DisapproveViewDataEvent>;

export interface DoctorRegisteredEventObject {
  doctor: string;
  timestamp: BigNumber;
}
export type DoctorRegisteredEvent = TypedEvent<
  [string, BigNumber],
  DoctorRegisteredEventObject
>;

export type DoctorRegisteredEventFilter =
  TypedEventFilter<DoctorRegisteredEvent>;

export interface DoctorRemovedEventObject {
  doctor: string;
  timestamp: BigNumber;
}
export type DoctorRemovedEvent = TypedEvent<
  [string, BigNumber],
  DoctorRemovedEventObject
>;

export type DoctorRemovedEventFilter = TypedEventFilter<DoctorRemovedEvent>;

export interface PaidEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type PaidEvent = TypedEvent<
  [string, string, BigNumber],
  PaidEventObject
>;

export type PaidEventFilter = TypedEventFilter<PaidEvent>;

export interface PatientRegisteredEventObject {
  patient: string;
  name: string;
  bloodType: number;
  lastUpdated: BigNumber;
}
export type PatientRegisteredEvent = TypedEvent<
  [string, string, number, BigNumber],
  PatientRegisteredEventObject
>;

export type PatientRegisteredEventFilter =
  TypedEventFilter<PatientRegisteredEvent>;

export interface PatientRemovedEventObject {
  patient: string;
}
export type PatientRemovedEvent = TypedEvent<
  [string],
  PatientRemovedEventObject
>;

export type PatientRemovedEventFilter = TypedEventFilter<PatientRemovedEvent>;

export interface PatientUpdatedEventObject {
  patient: string;
  name: string;
  bloodType: number;
  lastUpdated: BigNumber;
}
export type PatientUpdatedEvent = TypedEvent<
  [string, string, number, BigNumber],
  PatientUpdatedEventObject
>;

export type PatientUpdatedEventFilter = TypedEventFilter<PatientUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface MedicalDatabase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MedicalDatabaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    approveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disapproveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPatientData(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MedicalDatabase.PatientStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApproved(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pay(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePatient(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  approveViewData(
    _patient: PromiseOrValue<string>,
    _viewer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disapproveViewData(
    _patient: PromiseOrValue<string>,
    _viewer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    _patient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPatientData(
    _patient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MedicalDatabase.PatientStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApproved(
    _patient: PromiseOrValue<string>,
    _viewer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDoctor(
    _doctor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pay(
    _to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDoctor(
    _doctor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPatient(
    _patient: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _bloodType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeDoctor(
    _doctor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePatient(
    _patient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePatient(
    _patient: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _bloodType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    approveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    disapproveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPatientData(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MedicalDatabase.PatientStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApproved(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pay(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    registerDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePatient(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApproveViewData(address,address)"(
      patient?: PromiseOrValue<string> | null,
      viewer?: null
    ): ApproveViewDataEventFilter;
    ApproveViewData(
      patient?: PromiseOrValue<string> | null,
      viewer?: null
    ): ApproveViewDataEventFilter;

    "DisapproveViewData(address,address)"(
      patient?: PromiseOrValue<string> | null,
      viewer?: null
    ): DisapproveViewDataEventFilter;
    DisapproveViewData(
      patient?: PromiseOrValue<string> | null,
      viewer?: null
    ): DisapproveViewDataEventFilter;

    "DoctorRegistered(address,uint256)"(
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): DoctorRegisteredEventFilter;
    DoctorRegistered(
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): DoctorRegisteredEventFilter;

    "DoctorRemoved(address,uint256)"(
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): DoctorRemovedEventFilter;
    DoctorRemoved(
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): DoctorRemovedEventFilter;

    "Paid(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: null,
      value?: null
    ): PaidEventFilter;
    Paid(
      from?: PromiseOrValue<string> | null,
      to?: null,
      value?: null
    ): PaidEventFilter;

    "PatientRegistered(address,string,uint8,uint256)"(
      patient?: PromiseOrValue<string> | null,
      name?: null,
      bloodType?: null,
      lastUpdated?: null
    ): PatientRegisteredEventFilter;
    PatientRegistered(
      patient?: PromiseOrValue<string> | null,
      name?: null,
      bloodType?: null,
      lastUpdated?: null
    ): PatientRegisteredEventFilter;

    "PatientRemoved(address)"(
      patient?: PromiseOrValue<string> | null
    ): PatientRemovedEventFilter;
    PatientRemoved(
      patient?: PromiseOrValue<string> | null
    ): PatientRemovedEventFilter;

    "PatientUpdated(address,string,uint8,uint256)"(
      patient?: PromiseOrValue<string> | null,
      name?: null,
      bloodType?: null,
      lastUpdated?: null
    ): PatientUpdatedEventFilter;
    PatientUpdated(
      patient?: PromiseOrValue<string> | null,
      name?: null,
      bloodType?: null,
      lastUpdated?: null
    ): PatientUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    approveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disapproveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApproved(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPatientData(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApproved(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pay(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePatient(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disapproveViewData(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPatientData(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApproved(
      _patient: PromiseOrValue<string>,
      _viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pay(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePatient(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePatient(
      _patient: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _bloodType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
